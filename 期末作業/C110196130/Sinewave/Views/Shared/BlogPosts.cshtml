@model List<MarkdownFileInfo>
@inject MarkdownBlog Blog

<div class="mx-auto grid max-w-lg gap-5 lg:max-w-none lg:grid-cols-3">
    @foreach (var post in Model)
    {
        <div class="flex flex-col overflow-hidden rounded-lg shadow-lg" id="post-@post.Slug">
            <div class="flex-shrink-0">
                <a href="@Blog.GetPostLink(post)">
                    <img class="h-48 w-full object-cover" src="@Blog.GetSplashImage(post)" alt="">
                </a>
            </div>
            <div class="flex flex-1 flex-col justify-between bg-white dark:bg-black p-6">
                <div class="flex-1">
                    <p class="text-sm font-medium text-indigo-600 dark:text-indigo-300">
                        Article
                    </p>
                    <a href="@Blog.GetPostLink(post)" class="mt-2 block">
                        <p class="text-xl font-semibold text-gray-900 dark:text-gray-50 whitespace-nowrap overflow-hidden text-ellipsis" title="@post.Title">
                            @post.Title
                        </p>
                        <p class="mt-3 text-base text-gray-500">@post.Summary</p>
                    </a>
                </div>
                <div class="mt-6 flex items-center">
                    <div class="flex-shrink-0">
                        <a href="">
                            <span class="sr-only">@post.Author</span>
                            <img class="h-10 w-10 rounded-full" src="@Blog.GetAuthorProfileUrl(post.Author)" alt="@post.Title background">
                        </a>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-900">
                            <span>@post.Author</span>
                        </p>
                        <div class="flex space-x-1 text-sm text-gray-500">
                            <time datetime="@Blog.GetDateTimestamp(post.Date)">@Blog.GetDateLabel(post.Date)</time>
                            <span aria-hidden="true">&middot;</span>
                            <span>@Blog.MinutesToRead(post.WordCount) min read</span>
                        </div>
                    </div>
                </div>
                <!-- Add Edit and Delete buttons -->
                <div class="mt-4 flex justify-end space-x-4">
                    <a href="@Url.Action("Edit", "Blog", new { slug = post.Slug })"
                       class="text-sm font-medium text-blue-600 dark:text-blue-400 hover:underline">
                        Edit
                    </a>
                    <button onclick="deletePost('@post.Slug')"
                            class="text-sm font-medium text-red-600 dark:text-red-400 hover:underline">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<script>
    function deletePost(postSlug) {
        if (confirm('Are you sure you want to delete this post?')) {
            // Send a POST request to delete the post
            fetch(`/posts/delete/${postSlug}`, {
                method: 'POST'  // Use POST to avoid issues with browsers not supporting DELETE in forms
            })
            .then(response => {
                if (response.ok) {
                    // If successful, remove the post element from the page
                    const postElement = document.querySelector(`#post-${postSlug}`);
                    postElement.remove();  // Remove the post element
                } else {
                    alert('Failed to delete the post.');
                }
            })
            .catch(error => {
                alert('An error occurred: ' + error);
            });
        }
    }
</script>
